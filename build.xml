<?xml version="1.0"?>

<project name="IceNLPWeb" default="release-war" basedir="." xmlns:maven="antlib:org.eclipse.aether.ant">
	<description>
		Compiles a release version of the IceNLP Web Project as a single jar file
	</description>

	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="lib" location="lib" />

    <fileset id="include" dir="${lib}" includes="*.jar"/>
    <!--property name="j2ee" location="/usr/java/lib/javaee-api-6.0.jar" /-->

    <property name="war_name" value="IceNLPWeb" />
    <property name="war_fullname" value="${war_name}.war" />
    <property name="war_fullpath" value="${dist}/${war_fullname}" />

	<!-- download a copy of aether ant tasks if we don't have them already
		     NOTE: at some point switch to using Apache Maven Resolver for this -->
	<get src="http://search.maven.org/remotecontent?filepath=org/eclipse/aether/aether-ant-tasks/1.0.0.v20140518/aether-ant-tasks-1.0.0.v20140518-uber.jar" dest="aether-ant-tasks-uber.jar" verbose="true" skipexisting="true" />
	<fail message="Checksum mismatch for 'aether-ant-tasks-uber.jar'. Please delete it and rerun ant to redownload.">
		<condition>
			<not>
				<checksum file="aether-ant-tasks-uber.jar" algorithm="SHA" property="95dadd03392a75564904da45108cf048abe6e5bb" verifyproperty="checksum.matches" />
			</not>
		</condition>
	</fail>

	<path id="aether-ant-tasks.classpath" path="aether-ant-tasks-uber.jar" />
	<typedef resource="org/eclipse/aether/ant/antlib.xml" uri="antlib:org.eclipse.aether.ant" classpathref="aether-ant-tasks.classpath" />

	<!-- build the classpath via maven -->
	<maven:mirror id="central-https" url="https://repo1.maven.org/maven2" mirrorOf="central" />
	<maven:resolve>
		<maven:dependencies>
			<maven:dependency groupid="javax.servlet" artifactid="javax.servlet-api" version="3.1.0" scope="provided" />
			<maven:dependency groupid="eu.european-language-grid" artifactid="elg-java-bindings" version="1.0.0" />
			<maven:dependency groupid="com.fasterxml.jackson.core" artifactid="jackson-databind" version="2.13.1" />
			<maven:dependency groupid="com.fasterxml.jackson.core" artifactid="jackson-annotations" version="2.13.1" />
		</maven:dependencies>
		<path refid="mvn.compile.classpath" classpath="compile" />
                <files refid="mvn.runtime.libs" classpath="runtime" />
	</maven:resolve>

	<target name="init" depends="clean">
		<tstamp /> <!-- Create the timestamp for the build -->
		<!-- Create all the directories for the build -->
		<mkdir dir="${build}" />
		<mkdir dir="${dist}" />
	</target>


	<target name="compile" depends="init" description="Compiles all the source files">
		<!--<javac srcdir="${src}" destdir="${build}" classpath="${include}" /> -->
        	<javac srcdir="${src}" destdir="${build}">
                  <classpath>
                    <path refid="mvn.compile.classpath" />
                    <fileset refid="include" />
                  </classpath>
                </javac>
    	</target>


	<!--target name="release-war" depends="compile" description="Compiles a release version of the IceNLP Web project"-->
    <target name="release-war" depends="compile" description="Releases a version of the IceNLP Web project">

	<war destfile="${war_fullpath}" webxml="WEB-INF/web.xml">
            <!-- Copies all files from the html directory to the root of the war file-->
            <!--fileset dir="html" /-->
			<!-- Copies files from the dict directory to the WEB-INF directory of the war file-->
			<webinf dir="dict" includes="**/*.dict" />
            <!-- All files in the lib directory will end up in the WEB-INF/lib directory of the war file. -->
            <lib refid="include"/>
            <mappedresources>
              <resources refid="mvn.runtime.libs" />
              <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="WEB-INF/lib/*"/>
              </chainedmapper>
            </mappedresources>
            <!-- All files in the META-INF directory will end up in the META-INF directory of the war file. -->
            <metainf dir="META-INF"/>
            <!-- All files in the build directory will end up in the WEB-INF/classes directory of the war file. -->
            <!--classes dir="build"> <include name="**/*.class" /-->
            <classes dir="build">
				<include name="**/*.class" />
            </classes>
        </war>
	</target>


	<target name="clean" description="clean up" >
        	<delete dir="${build}" />
        	<delete dir="${dist}"/>
        	<delete dir="classes"/>
    	</target>
</project>
